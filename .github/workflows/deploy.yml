# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support documentation
# This workflow will download a prebuilt Java version, install dependencies, build and deploy/publish a new release

name: Deploy and Publish

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Deploy and Publish
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: false

    - name: Set up dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '2.1.x'

    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: 12

    - name: Install Semantic Release and nuget dependencies
      run: |
        sudo apt-get install bumpversion
        npm install -g semantic-release
        npm install -g @semantic-release/changelog
        npm install -g @semantic-release/exec
        npm install -g @semantic-release/git
        npm install -g @semantic-release/github
        npm install -g @semantic-release/commit-analyzer
        npm install -g @semantic-release/release-notes-generator
        echo -e "\n\033[0;35mCommand: install Doxygen"
        sudo apt-get install doxygen

    - name: Before Build
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Get the version tag
      id: get_version_tag
      run: echo ::set-output name=SOURCE_TAG::$(echo $GITHUB_REF | cut -d / -f 3)

    - name: Publish to Git Releases and Tags
      continue-on-error: true
      id: is_new_release
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: echo ::set-output name=IS_NEW_RELEASE::$(npx semantic-release --dry-run --branches 9588_gha_deploy | grep -c -i "no relevant changes")

  # I think we can publish everytime because trying to push up a duplicate will fail with already exists and cannot be modified (409)
    - name: Publish to Nuget
      continue-on-error: true
      env:
          NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
          REPO_TAG_NAME: "*"
      run: |
        echo -e "\n\033[0;35mCommand: New Release - ${{ steps.is_new_release.outputs.IS_NEW_RELEASE }}"
