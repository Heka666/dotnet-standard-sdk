version: 5.1.0.{build}
branches:
  except:
  - gh-pages
configuration: Release
image: Visual Studio 2017
# platform: Any CPU
clone_folder: C:\projects\dotnet-standard-sdk
environment:
    COVERALLS_REPO_TOKEN:
        secure: Dnsrk2n+VNE4swcbTLXpfnHwUwTWT8TqMiMkthU6mq/ohNq9dA2rrSA6kdLDBKME  #pragma: whitelist secret
    WPS_GITHUB_TOKEN:
        secure: J0LjUlYl+lGJMLBcOgVF1m1I07nyr+8yFOMaNBA23RGLMJKvYnRlhmGWXp07ejgu #pragma: whitelist secret
    CRED_SECRET:
        secure: eEcA/09B7XzeTSb3GlaeqcWfQ/TemXxAq9/0AFM5+z8= #pragma: whitelist secret
    CREDENTIALS_GITHUB_TOKEN:
        secure: AUDY6qr79GWuO1MSwogzZV+v+4TGx/F0myYmPQ+Bvp8/lclZCJa2UezLsbDftRMd #pragma: whitelist secret
    GITHUB_TOKEN:
        secure: dQC0NXlIJIGl3A0A45uVsqq8pFjCisYd1otn3iW2Tfy4UZJ7J5PVOYJWXU3ZGG7k #pragma: whitelist secret
    IBM_CREDENTIALS_FILE: C:/projects/sdk-credentials/ibm-credentials.env
install:
# Get the latest stable version of Node.js or io.js
- ps: Install-Product node 12.13.0

- cmd: >-
    pip install git+git://github.com/smsearcy/bumpversion.git@issue-135

    npm install semantic-release
    
    npm install @semantic-release/exec
    
    npm install @semantic-release/git
    
    npm install @semantic-release/github

    npm install @semantic-release/commit-analyzer

    npm install @semantic-release/changelog

    npm install @semantic-release/release-notes-generator

    pip install bumpversion

    rm -rf packages

    mkdir packages

    nuget restore

    nuget install -Verbosity quiet -OutputDirectory packages -Version 4.7.922 OpenCover

    nuget install -Verbosity quiet -OutputDirectory packages -Version 0.7.0 coveralls.net

    nuget install -Verbosity quiet -OutputDirectory packages -Version 1.8.14 Doxygen

    nuget install -Verbosity quiet -OutputDirectory packages secure-file -ExcludeVersion

before_build:
- ps: >-
    if($env:APPVEYOR_PULL_REQUEST_NUMBER -eq $null)
    {
      git clone https://$env:CREDENTIALS_GITHUB_TOKEN@github.ibm.com/germanatt/sdk-credentials.git C:/projects/sdk-credentials -q
    }

    dotnet restore

build:
  project: IBM.Watson.sln
  verbosity: minimal
after_build:
- ps: >-
    git config --global user.email "wps@us.ibm.com"

    git config --global user.name "Watson Github Bot"

    if(!$env:APPVEYOR_REPO_TAG_NAME)

    {

        $branchName = $env:APPVEYOR_REPO_BRANCH

    }

    else

    {

        $branchName = $env:APPVEYOR_REPO_TAG_NAME

    }

    Write-Output "branchName  is " + $branchName

    if($env:APPVEYOR_PULL_REQUEST_NUMBER -eq $null)

    {
      
      If($branchName -eq "development" -or $branchName -eq $env:APPVEYOR_REPO_TAG_NAME -or $branchName -eq "master")

      {

          .\packages\Doxygen.1.8.14\tools\doxygen.exe Doxyfile

          git clone --quiet --branch=gh-pages https://$env:WPS_GITHUB_TOKEN@github.com/watson-developer-cloud/dotnet-standard-sdk.git gh-pages

          If(Test-Path -Path gh-pages\docs\$branchName)

          {

            rm gh-pages\docs\$branchName -r -force

          }

          mkdir -p gh-pages\docs\$branchName

          mv .\docs\html gh-pages\docs\$branchName

          . .\.utility\generate_html.ps1

          New-TableOfContents ".\gh-pages\docs" | Out-File ".\gh-pages\index.html" -encoding utf8

          cd gh-pages

          git add -f .

          git commit -m "Updated documentation for $branchName"

          git push -f origin gh-pages

          cd ../

      }

      else

      {

          Write-Output "branchName is $branchName. Not generating documentation."

      }

    }

    Copy-Item C:\projects\dotnet-standard-sdk\src\IBM.Watson.VisualRecognition.v3\Test\Integration\VisualRecognitionTestData C:\projects\dotnet-standard-sdk\VisualRecognitionTestData

    Copy-Item C:\projects\dotnet-standard-sdk\src\IBM.Watson.VisualRecognition.v4\Test\Integration\VisualRecognitionTestData C:\projects\dotnet-standard-sdk\VisualRecognitionTestData

    Copy-Item C:\projects\dotnet-standard-sdk\src\IBM.Watson.SpeechToText.v1\Test\Integration\SpeechToTextTestData C:\projects\dotnet-standard-sdk\SpeechToTextTestData

    Copy-Item C:\projects\dotnet-standard-sdk\src\IBM.Watson.Discovery.v1\Test\Integration\DiscoveryTestData C:\projects\dotnet-standard-sdk\DiscoveryTestData
    
    Copy-Item C:\projects\dotnet-standard-sdk\src\IBM.Watson.CompareComply.v1\Test\Integration\CompareComplyTestData C:\projects\dotnet-standard-sdk\CompareComplyTestData

    Copy-Item C:\projects\dotnet-standard-sdk\src\IBM.Watson.NaturalLanguageClassifier.v1\Test\Integration\NaturalLanguageClassifierTestData C:\projects\dotnet-standard-sdk\NaturalLanguageClassifierTestData
test_script:
- ps: >-
    if(Test-Path -Path coverage)

    {
        
        rm coverage -r -force

    }

    New-Item -path . -name coverage -itemtype directory
    
    $testDirectories = "IBM.Watson.Assistant.v1", "IBM.Watson.Assistant.v2", "IBM.Watson.CompareComply.v1", "IBM.Watson.Discovery.v1", 
    "IBM.Watson.Discovery.v2", "IBM.Watson.LanguageTranslator.v3", "IBM.Watson.NaturalLanguageClassifier.v1", 
    "IBM.Watson.NaturalLanguageUnderstanding.v1", "IBM.Watson.PersonalityInsights.v3", "IBM.Watson.SpeechToText.v1",
    "IBM.Watson.TextToSpeech.v1", "IBM.Watson.ToneAnalyzer.v3", "IBM.Watson.ToneAnalyzer.v3", "IBM.Watson.VisualRecognition.v4"

    ForEach ($serviceDirectory in $testDirectories)
    {
      ForEach ($folder in (Get-ChildItem -Path C:\\projects\\dotnet-standard-sdk\\src\\$serviceDirectory\\Test -Directory)) 

      { 

          if($env:APPVEYOR_PULL_REQUEST_NUMBER -eq $null)

          {

              Write-Output \"No pull request number. Executing tests\"

              # dotnet test $serviceDirectory $folder.FullName

              # if($LastExitCode -ne 0) 

              # {

              #     $host.SetShouldExit($LastExitCode )

              # }

              echo \"Test passed: $?\"

              echo \"LastExitCode: $LastExitCode\"

              $openCover = 'C:\\projects\\dotnet-standard-sdk\\packages\\OpenCover.4.7.922\\tools\\OpenCover.Console.exe'    
              
              $targetArgs = '-targetargs: test ' + $folder.FullName + ' -c Release -f netcoreapp2.0'
              
              $filter = '-filter:+[IBM.Watson*]*-[*Tests*]*-[*Example*]*'
              
              & $openCover '-target:C:\\Program Files\\dotnet\\dotnet.exe' $targetArgs '-register:user' $filter '-oldStyle' '-mergeoutput' '-hideskipped:File' '-searchdirs:$testdir\\bin\\release\\netcoreapp2.0' '-output:coverage\\coverage.xml'

              if($env:COVERALLS_REPO_TOKEN)
              
              {
              
                  C:\projects\dotnet-standard-sdk\packages\coveralls.net.0.7.0\tools\csmacnz.Coveralls.exe --opencover -i coverage\coverage.xml --useRelativePaths
              
                  }
              
              else

              {

                  Write-Output \"There is no Coveralls Repo Token - not pushing coverage.\"

              }
          }

          else

          {
              Write-Output \"Pull request number is $env:APPVEYOR_PULL_REQUEST_NUMBER. Skipping integration tests.\"

              if($folder.FullName.EndsWith("Unit"))

              {

                  dotnet test $folder.FullName

                  if($LastExitCode -ne 0) 

                  {

                      $host.SetShouldExit($LastExitCode )

                  }

                  echo \"Test passed: $?\"

                  echo \"LastExitCode: $LastExitCode\"

              }

          }

      }
    }

    If($branchName -eq "master" -and $env:APPVEYOR_PULL_REQUEST_NUMBER -eq $null)

    {
        
        Write-Output "branchName is master and not a pull request - running semantic release"

        npx -q semantic-release

    }

    ElseIf($branchName -eq $env:APPVEYOR_REPO_TAG_NAME)

    {
        Write-Output "branchName  is " + $branchName + " - building NuGet packages" 

        dotnet pack .\src\IBM.Watson.Assistant.v1\IBM.Watson.Assistant.v1.csproj --configuration Release

        dotnet pack .\src\IBM.Watson.Assistant.v2\IBM.Watson.Assistant.v2.csproj --configuration Release

        dotnet pack .\src\IBM.Watson.CompareComply.v1\IBM.Watson.CompareComply.v1.csproj --configuration Release

        dotnet pack .\src\IBM.Watson.Discovery.v1\IBM.Watson.Discovery.v1.csproj --configuration Release

        dotnet pack .\src\IBM.Watson.Discovery.v2\IBM.Watson.Discovery.v2.csproj --configuration Release

        dotnet pack .\src\IBM.Watson.LanguageTranslator.v3\IBM.Watson.LanguageTranslator.v3.csproj --configuration Release

        dotnet pack .\src\IBM.Watson.NaturalLanguageClassifier.v1\IBM.Watson.NaturalLanguageClassifier.v1.csproj --configuration Release

        dotnet pack .\src\IBM.Watson.NaturalLanguageUnderstanding.v1\IBM.Watson.NaturalLanguageUnderstanding.v1.csproj --configuration Release

        dotnet pack .\src\IBM.Watson.PersonalityInsights.v3\IBM.Watson.PersonalityInsights.v3.csproj --configuration Release

        dotnet pack .\src\IBM.Watson.SpeechToText.v1\IBM.Watson.SpeechToText.v1.csproj --configuration Release

        dotnet pack .\src\IBM.Watson.TextToSpeech.v1\IBM.Watson.TextToSpeech.v1.csproj --configuration Release

        dotnet pack .\src\IBM.Watson.ToneAnalyzer.v3\IBM.Watson.ToneAnalyzer.v3.csproj --configuration Release

        dotnet pack .\src\IBM.Watson.VisualRecognition.v3\IBM.Watson.VisualRecognition.v3.csproj --configuration Release

        dotnet pack .\src\IBM.Watson.VisualRecognition.v4\IBM.Watson.VisualRecognition.v4.csproj --configuration Release

    }


artifacts:
- path: '\src\IBM.Watson.Assistant.v1\bin\$(configuration)\*.nupkg'
  name: IBM.Watson.Assistant.v1
- path: '\src\IBM.Watson.Assistant.v2\bin\$(configuration)\*.nupkg'
  name: IBM.Watson.Assistant.v2
- path: '\src\IBM.Watson.CompareComply.v1\bin\$(configuration)\*.nupkg'
  name: IBM.Watson.CompareComply.v1
- path: '\src\IBM.Watson.Discovery.v1\bin\$(configuration)\*.nupkg'
  name: IBM.Watson.Discovery.v1
- path: '\src\IBM.Watson.Discovery.v2\bin\$(configuration)\*.nupkg'
  name: IBM.Watson.Discovery.v2
- path: '\src\IBM.Watson.LanguageTranslator.v3\bin\$(configuration)\*.nupkg'
  name: IBM.Watson.LanguageTranslator.v3
- path: '\src\IBM.Watson.PersonalityInsights.v3\bin\$(configuration)\*.nupkg'
  name: IBM.Watson.PersonalityInsights.v3
- path: '\src\IBM.Watson.SpeechToText.v1\bin\$(configuration)\*.nupkg'
  name: IBM.Watson.SpeechToText.v1
- path: '\src\IBM.Watson.TextToSpeech.v1\bin\$(configuration)\*.nupkg'
  name: IBM.Watson.TextToSpeech.v1
- path: '\src\IBM.Watson.ToneAnalyzer.v3\bin\$(configuration)\*.nupkg'
  name: IBM.Watson.ToneAnalyzer.v3
- path: '\src\IBM.Watson.VisualRecognition.v3\bin\$(configuration)\*.nupkg'
  name: IBM.Watson.VisualRecognition.v3
- path: '\src\IBM.Watson.VisualRecognition.v4\bin\$(configuration)\*.nupkg'
  name: IBM.Watson.VisualRecognition.v4
- path: '\src\IBM.Watson.NaturalLanguageUnderstanding.v1\bin\$(configuration)\*.nupkg'
  name: IBM.Watson.NaturalLanguageUnderstanding.v1
- path: '\src\IBM.Watson.NaturalLanguageClassifier.v1\bin\$(configuration)\*.nupkg'
  name: IBM.Watson.NaturalLanguageClassifier.v1
deploy:
- provider: NuGet
  api_key:
    secure: 9rl2GRm8k9JdPuNNnFECkWxgbl/j5JDc3qajXawKvgnSbT7adY96jYFLynzITWjl
  on:
    branch: master
    APPVEYOR_REPO_TAG: true
    
